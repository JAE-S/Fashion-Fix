{"version":3,"sources":["Components/Loading/index.js","Components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Loading","useStyles","makeStyles","theme","root","display","flexDirection","main","marginTop","spacing","marginBottom","footer","color","padding","textAlign","textDecoration","link","Footer","classes","className","Container","maxWidth","Typography","justify","variant","SocialWall","lazy","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAYeA,MATf,WAEI,OACI,4C,wBCIEC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACTC,cAAe,UAEjBC,KAAM,CACJC,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,IAE9BE,OAAQ,CACNC,MAAO,UACPC,QAASV,EAAMM,QAAQ,EAAG,GAC1BD,UAAW,OACXM,UAAW,SACXC,eAAgB,QAEnBC,KAAM,CACLD,eAAgB,iBAChBH,MAAO,eAQF,SAASK,IACZ,IAAMC,EAAUjB,IAEhB,OACI,yBAAKkB,UAAWD,EAAQd,MACpB,4BAAQe,UAAWD,EAAQP,QACvB,kBAACS,EAAA,EAAD,CAAWC,SAAS,KAAKF,UAAWD,EAAQF,MACxC,kBAACM,EAAA,EAAD,CAAaC,QAAQ,SAASC,QAAQ,SACjC,SADL,mD,gBC7BhBC,EAAaC,gBAAK,kBAAM,uDAefC,EATF,kBACX,oCACE,kBAAC,WAAD,CAAUC,SALa,kBAAC,EAAD,OAMrB,kBAACH,EAAD,OAEF,kBAACR,EAAD,QCbcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1634bcf8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Loading() {\n    \n    return (\n        <div>\n            Loading... \n       </div>\n    );\n}\n\nexport default Loading; ","// React Imports \n// =========================================================   \n    import React from \"react\";\n// Material UI Components\n// =========================================================\n    import { makeStyles } from '@material-ui/core/styles';\n    import { Typography, Container } from '@material-ui/core/';\n\n// Styles\n// =========================================================\n    const useStyles = makeStyles(theme => ({\n      root: {\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      main: {\n        marginTop: theme.spacing(8),\n        marginBottom: theme.spacing(2),\n      },\n      footer: {\n        color: \"#f7f7f7\",\n        padding: theme.spacing(3, 2),\n        marginTop: 'auto',\n        textAlign: 'center',\n        textDecoration: \"none\"\n      },\n     link: {\n      textDecoration: \"none!important\", \n      color: \"#56585D\"\n     }\n\n\n    }));\n\n// Footer\n// =========================================================\n    export function Footer() {\n        const classes = useStyles();\n    \n        return (\n            <div className={classes.root}>\n                <footer className={classes.footer}>\n                    <Container maxWidth=\"sm\" className={classes.link}>\n                        <Typography  justify=\"center\" variant=\"body2\">\n                            {' Â© '} 2020 Bullring Birmingham Autumn Fashion Fix\n                        </Typography>\n                    </Container>\n                </footer>\n            </div>\n        );\n    }","// React Imports \n// =========================================================\n  // import React from 'react';\n  import React, {lazy, Suspense } from 'react';\n// Components\n// =========================================================\n  import Loading from './Components/Loading'\n  import { Footer } from './Components/Footer'\n// Stylesheets\n// =========================================================\n  import './Assets/globalCss/layout.css'\n  import './Assets/globalCss/typography.css'\n// Pages \n// =========================================================\n  const SocialWall = lazy(() => import('./Pages/socialWall'));\n// Fallback prop to render while Social Wall is loading \n// =========================================================\n  const renderLoader = () => <Loading/>;\n\n  \n  const  App = () => (\n    <>\n      <Suspense fallback={renderLoader()}>\n        <SocialWall/>\n      </Suspense>\n      <Footer/>\n    </>\n  )\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}